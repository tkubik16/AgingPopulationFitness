@page "/"
@inject ToastService toastService
@inject UserState UserState;
@inject NavigationManager Navigation;
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject ExerciseFilterState ExerciseFilterState
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<head>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" integrity="sha384-gfdkjb5BdAXd+lj+gudLWI+BXq4IuLW5IT+brZEZsLFm++aCMlF1V92rMkPaX4PP" crossorigin="anonymous">

</head>

<PageTitle>Index</PageTitle>

<h1>Index</h1>

This section will eventually be used to describe the purpose
of this project as well as disclaimers

<button class="btn btn-info" @onclick="@(() => toastService.ShowToast("I'm an INFO message", ToastLevel.Info))">Info Toast</button>
<button class="btn btn-success" @onclick="@(() => toastService.ShowToast("I'm a SUCCESS message", ToastLevel.Success))">Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => toastService.ShowToast("I'm a WARNING message", ToastLevel.Warning))">Warning Toast</button>
<button class="btn btn-danger" @onclick="@(() => toastService.ShowToast("I'm an ERROR message", ToastLevel.Error))">Error Toast</button>

@code{
    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if( UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if( UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.GetItemAsStringAsync("UserId") != null)
        {

            await UserState.Refresh( sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
            UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
            ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;
            StateHasChanged();
            Console.Write("injuryLcoations list length: ");
            Console.WriteLine(UserState.injuryLocations.Count);
        }


    }
}