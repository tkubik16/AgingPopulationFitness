@page "/"
@inject UserState UserState;
@inject NavigationManager Navigation;
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject ExerciseFilterState ExerciseFilterState
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<PageTitle>Index</PageTitle>

<h1>Index</h1>

This section will eventually be used to describe the purpose
of this project as well as disclaimers




@if (UserState.userProfile.UserId.HasValue )
{
    <h2>Welcome,</h2>
    <h2>@UserState.userProfile.Username</h2>
    <InjuryLocations></InjuryLocations>

    <div>@ExerciseFilterState.ExerciseFilter.ExcludeBasedOnInjuries</div>
    <div>@ExerciseFilterState.benefitSelectValue</div>

}


@code{
    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if( UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if( UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.GetItemAsStringAsync("UserId") != null)
        {

            await UserState.Refresh( sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
            UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
            ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;
            StateHasChanged();
            Console.Write("injuryLcoations list length: ");
            Console.WriteLine(UserState.injuryLocations.Count);
        }


    }
}