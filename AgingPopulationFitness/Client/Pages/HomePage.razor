@page "/home-page"
@inject UserState UserState;
@inject NavigationManager Navigation;
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject ExerciseClient ExerciseClient
@inject ExerciseFilterState ExerciseFilterState
@inject ExerciseFilterState ExerciseFilterState;
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;



@if (UserState.userProfile.UserId.HasValue)
{
    <div class="home-page">
        <div class="welcome-section">
            <text>@string.Format("Welcome, {0}", UserState.userProfile.Username)</text>
        </div>
        <div class="injuries-widget">
            <InjuryLocations update="UpdateInjuryLocations"></InjuryLocations>
        </div>
    </div>


}

@code {

    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    public bool UpdateInjuryLocations = false;

    protected override async Task OnInitializedAsync()
    {

        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
            await RequeryInfo();
            UpdateInjuryLocations = true;
            StateHasChanged();
            UpdateInjuryLocations = false;

        }

        try
        {


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }



    }



    public async Task<bool> RequeryInfo()
    {
        //get Users injury lcoations
        UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
        ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;
        //get benefits, exercise types and injury locations
        if (ExerciseFilterState.ExerciseFilter.BenefitsList.Count == 0)
        {
            ExerciseFilterState.ExerciseFilter.BenefitsList = await ExerciseClient.GetGeneralBenefits();


        }
        if (ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Count == 0)
        {
            ExerciseFilterState.ExerciseFilter.ExerciseTypesList = await ExerciseClient.GetExerciseTypes();

        }

        return true;

    }

}
