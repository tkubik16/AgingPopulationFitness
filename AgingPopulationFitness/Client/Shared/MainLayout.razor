@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject IJSRuntime JSRuntime
@inject UserState UserState;
@inject ExerciseFilterState ExerciseFilterState;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<head>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Quicksand">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" integrity="sha384-gfdkjb5BdAXd+lj+gudLWI+BXq4IuLW5IT+brZEZsLFm++aCMlF1V92rMkPaX4PP" crossorigin="anonymous">

</head>

<Toast />

<div class="whole">
    <div class="top-bar" id="nav-bar">
        <div class="logo-div" @onclick="GoToIndex" >
            <!-- <img class="logo-div-img" src="Images/tkubik_simple_fitness_logo_neon_signs_green_orange_760dedd0-69c1-4c03-b1cf-0708f194c620.png"/> -->
            <h1>HF</h1>
        </div>
        @if (UserState.isLoggedIn)
        {
            <NavLink href="home-page" class="nav-tab" Match="NavLinkMatch.All">
                <div>Home</div>
            </NavLink>


            <NavLink href="injuries-page" class="nav-tab">
                <div>My</div>
                <div>Injuries</div>
            </NavLink>

            <NavLink href="exercises-page" class="nav-tab">
                <div>Find</div>
                <div>Exercises</div>
            </NavLink>
            
            <div class="dropdown">
                <!-- <button class="dropbtn">More</button>-->
                <div>More</div>
                <div class="dropdown-content">
                    <NavLink href="suggest-exercise-page" class="nav-tab-dropdown">
                        <div>Suggest</div>
                        <div>Exercise</div>
                    </NavLink>
                    <NavLink href="feedback" class="nav-tab-dropdown" >
                        <div>Feedback</div>
                    </NavLink>
                    <NavLink href="" class="nav-tab-dropdown" Match="NavLinkMatch.All">
                        <div>About</div>
                    </NavLink>
                </div>
            </div>

            <NavLink href="login" class="nav-tab" @onclick="Logout">
                <div>Logout</div>
            </NavLink>
        }
        @if (!(UserState.isLoggedIn))
        {
            <NavLink href="login" class="nav-tab">
                <div>Login</div>
            </NavLink>
        }


    </div>
    

    <div class="top-bar-mobile" id="nav-bar-mobile">
        <div class="logo-close-button-mobile">
            <a class="logo-mobile" href="">
                <text>LOGO</text>
            </a>
            <button @onclick="CloseNav">X</button>
        </div>
        @if (UserState.isLoggedIn)
        {
            <NavLink href="home-page" @onclick="CloseNav"  class="nav-tab-mobile" >
                <div>Home</div>
            </NavLink>

            <NavLink href="injuries-page" @onclick="CloseNav" class="nav-tab-mobile">
                <div>My</div>
                <div>Injuries</div>
            </NavLink>

            <NavLink href="exercises-page" @onclick="CloseNav" class="nav-tab-mobile">
                <div>Find</div>
                <div>Exercises</div>
            </NavLink>

            <NavLink href="suggest-exercise-page" @onclick="CloseNav"  class="nav-tab-mobile">
                <div>Suggest</div>
                <div>Exercises</div>
            </NavLink>

            <NavLink href="feedback" @onclick="CloseNav" class="nav-tab-mobile">
                <div>Feedback</div>
            </NavLink>

            <NavLink href="" @onclick="CloseNav" class="nav-tab-mobile" Match="NavLinkMatch.All">
                <div>About</div>
            </NavLink>

            <NavLink href="login"  class="nav-tab-mobile" @onclick="Logout">
                <div @onclick="CloseNav">Logout</div>
            </NavLink>
        }
        @if (!(UserState.isLoggedIn))
        {
            <NavLink href="login" @onclick="CloseNav" class="nav-tab-mobile">
                <div>Login</div>
            </NavLink>
        }


    </div>
    <!--
    <div class="open-nav-mobile" id="open-nav-button-mobile">
        <button @onclick="OpenNav"><img src="Images/menu.svg" /></button>
    </div>
    -->
    <div class="content" id="main-body">
        <CascadingValue Value=@UpdateMenuOnLogIn Name="UpdateMenuOnLogIn">
            <CascadingValue Value=@UpdateMenuOnRefresh Name="UpdateMenuOnRefresh">
                @Body
        </CascadingValue>
        </CascadingValue>
    </div>
</div>

@code {
    EventCallback UpdateMenuOnLogIn => EventCallback.Factory.Create(this, UpdateAlertMenuOnLogIn);
    EventCallback UpdateMenuOnRefresh => EventCallback.Factory.Create(this, UpdateAlertMenuOnRefresh);

    public void UpdateAlertMenuOnLogIn()
    {
        Console.WriteLine("In updateAlertmenu: " + UserState.isLoggedIn);
        IsLoggedInHelper();
        Console.WriteLine("In updateAlertmenu: " + UserState.isLoggedIn);

    }

    public async void LoggedInCheck()
    {
        if (UserState.userProfile == null)
        {
            UserState.isLoggedIn = false;
            StateHasChanged();
            return;
        }
        if (UserState.userProfile.UserId == null)
        {
            UserState.isLoggedIn = false;
            StateHasChanged();
            return;
        }
        UserState.isLoggedIn = await UserClient.IsLoggedIn(UserState.userProfile);
        Console.WriteLine("In LoggedInCheck: " + UserState.isLoggedIn);
        Navigation.NavigateTo("/home-page");
        StateHasChanged();

    }

    public void IsLoggedInHelper()
    {
        LoggedInCheck();

    }

    public void UpdateAlertMenuOnRefresh()
    {
        Console.WriteLine("In updateAlertmenu: " + UserState.isLoggedIn);
        RefreshHelper();
        Console.WriteLine("In updateAlertmenu: " + UserState.isLoggedIn);

    }

    public async void RefreshPage()
    {
        if (UserState.userProfile == null)
        {
            UserState.isLoggedIn = false;
            StateHasChanged();
            return;
        }
        if (UserState.userProfile.UserId == null)
        {
            UserState.isLoggedIn = false;
            StateHasChanged();
            return;
        }
        UserState.isLoggedIn = await UserClient.IsLoggedIn(UserState.userProfile);
        Console.WriteLine("In LoggedInCheck: " + UserState.isLoggedIn);
        //Navigation.NavigateTo("");
        StateHasChanged();

    }

    public void RefreshHelper()
    {
        RefreshPage();

    }

    public async void Logout()
    {
        if (UserState.userProfile != null)
        {
            UserState.userProfile.UserId = null;
            UserState.userProfile.Username = null;
        }
        Console.WriteLine("Logout:");
        UserState.userProfile.PrintUserProfile();
        //to reset ExerciseFilterState after logout 
        ExerciseFilterState.AllBenefitsList.Clear();
        ExerciseFilterState.AllExerciseTypesList.Clear();
        for (int i = 0; i < ExerciseFilterState.ExerciseFilter.BenefitsList.Count; i++)
        {
            //ExerciseFilterState.AllBenefitsList.Add(ExerciseFilterState.ExerciseFilter.BenefitsList[i]);
        }
        for (int i = 0; i < ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Count; i++)
        {
            //ExerciseFilterState.AllExerciseTypesList.Add(ExerciseFilterState.ExerciseFilter.ExerciseTypesList[i]);
        }
        await sessionStorage.ClearAsync();
        IsLoggedInHelper();

    }

    public void GoToIndex()
    {
        Navigation.NavigateTo("/");
    }

    public async void OpenNav()
    {
        await JSRuntime.InvokeVoidAsync("openNav");
    }

    public async void CloseNav()
    {
        await JSRuntime.InvokeVoidAsync("closeNav");
    }

}
