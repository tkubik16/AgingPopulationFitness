@page "/injuries-page"
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject InjuryState InjuryState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject InjuryState InjuryState
@inject UserState UserState
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


@if (InjuryState.ShowingConfigureDialog)
{
    <AddInjuryDialog userInjury="InjuryState.ConfiguringUserInjury"
                 OnCancel="InjuryState.CancelConfigureUserInjuryDialog"
                 OnConfirm="InjuryState.ConfirmConfigureUserInjuryDialog" />
}
@if (userInjuries == null)
{
    <div class="spinner"></div>
}
@if (userInjuries != null)
{
    @if( userInjuries.Count == 0)
    {
        <h1 class="no-cards-message">No injuries have been added.</h1>
    }
}
@if (userInjuries != null)
{
    <div class="main">
        <div class="add-injury-button-div">
            <button class="add-injury-button" @onclick="@(() => InjuryState.ShowConfigureUserInjuryDialog())">Add Injury</button>
        </div>

        <ul class="user-injury-cards">
            @if (userInjuries != null)
            {
                @foreach (var userInjury in userInjuries)
                {
                    <li class="user-injury-info">
                        <h3 class="title">@userInjury.InjuryName</h3>
                        <text class="title">Severity: @userInjury.InjurySeverity</text>
                        <text class="title">Date: @userInjury.InjuryDate</text>

                        <div class="injuries">
                            @foreach (var injuryLocation in userInjury.InjuryLocations)
                            {
                                <div class="injury">
                                    @injuryLocation.BodyPart
                                </div>
                            }
                        </div>
                        <div class="view-injury-button-div">
                            <button class="view-injury-button" @onclick="@(() => NavigationManager.NavigateTo($"injuries-page/" + @userInjury.InjuryId ) )">
                                View
                            </button>
                        </div>
                    </li>
                }

            }
        </ul>
    </div>
}

@code {
    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    public List<UserInjury> userInjuries;

    protected override async Task OnInitializedAsync()
    {
        if (UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if (UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
        }
        
        if (UserState.userProfile.UserId != null)
        {
            try
            {
                //Console.WriteLine("Injuries razor " + UserState.userProfile.UserId);
                //UserClient.GetUsersInjuries(UserState.userProfile.UserId);
                userInjuries = await UserClient.GetUsersInjuries(UserState.userProfile.UserId);
                UserState.userInjuries = userInjuries;
                for (int i = 0; i < userInjuries.Count; i++)
                {
                    userInjuries[i].PrintUserInjury();
                }
            }
            catch( Exception e)
            {
                Console.WriteLine(e);
            }
        }
        
    }



}
