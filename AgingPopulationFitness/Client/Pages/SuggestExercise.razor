@page "/suggest-exercise-page"
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject ExerciseClient ExerciseClient
@inject InjuryState InjuryState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject InjuryState InjuryState
@inject UserState UserState
@inject ToastService toastService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<h1>Suggest an Exercise</h1>

<div class="suggest-exercise-form">
    <div class="dialog-body-input">
        <label>Exercise Name:</label>
        <div>
            <input type="text" @bind="suggestedExercise.Exercise.ExerciseName" />
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Exercise Description:</label>
        <div>
            <textarea rows="5" cols="35" style="resize: none;" @bind="suggestedExercise.Exercise.ExerciseDescription" />
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Exercise Instructions:</label>
        <div>
            <textarea rows="5" cols="35" style="resize: none;" @bind="suggestedExercise.Exercise.ExerciseInstructions" />
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Exercise Internet Link:</label>
        <div>
            <input type="text" @bind="suggestedExercise.Exercise.ExerciseLink" />
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Exercise Main Image:</label>
        <div>
            <InputFile accept=".JPG, .PNG" OnChange="@RunFileConversion"/>
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Exercise Type:</label>
        <div>
            <select class="custom-select" @onchange="ExerciseTypeSelected">
                <option value="-1" disabled selected>(select)</option>
                @for (var i = 0; i < ExerciseTypes.Count; i++)
                {

                    <option value="@i">@i @ExerciseTypes[i].Type @ExerciseTypes[i].ExerciseTypeId</option>
                }
            </select>
        </div>
    </div>
    <div class="dialog-body-input">
        <label>Add Exercise Benefits: </label>
        @if (benefits == null)
        {
            <select class="custom-select" disabled>
                <option>(loading...)</option>
            </select>
        }
        else
        {
            <select class="custom-select" @onchange="BenefitSelected">
                <option value="-1" disabled selected>(select)</option>
                @for (var i = 0; i < benefits.Count; i++)
                {

                    <option value="@i">@i @benefits[i].BenefitId @benefits[i].BenefitName @benefits[i].BenefitSpecificity</option>
                }
            </select>
        }
    </div>
    <div class="injuries">
        @foreach (var benefit in suggestedExercise.Exercise.Benefits)
        {
            <div class="injury">
                @benefit.BenefitName
                <button type="button" class="x-btn" @onclick="@(() => RemoveBenefit(benefit))">x</button>
            </div>
        }
    </div>
    <div class="dialog-body-input">
        <label>Add Injury Location it would aggravate: </label>
        @if (injuryLocations == null)
        {
            <select class="custom-select" disabled>
                <option>(loading...)</option>
            </select>
        }
        else
        {
            <select class="custom-select" @onchange="InjuryLocationSelected">
                <option value="-1" disabled selected>(select)</option>
                @for (var i = 0; i < injuryLocations.Count; i++)
                {

                    <option value="@i">@i @injuryLocations[i].InjuryLocationId @injuryLocations[i].BodyPart </option>
                }
            </select>
        }
    </div>

    <div class="injuries">
        @foreach (var injuryLocation in suggestedExercise.Exercise.InjuryLocations)
        {
            <div class="injury">
                @injuryLocation.BodyPart
                <button type="button" class="x-btn" @onclick="@(() => RemoveInjuryLocation(injuryLocation))">x</button>
            </div>
        }
    </div>
    <div>
        <button @onclick="SubmitExerciseSuggestion">Submit Exercise</button>
    </div>
</div>
@if (Image != string.Empty)
{
    <div class="image-preview">
        <img class="suggested-exercise-main-img" src="@Image" alt="default" />
    </div>
}

@code {
    public string Image = string.Empty;
    public List<InjuryLocation> injuryLocations = new List<InjuryLocation>();
    public List<Benefit> benefits = new List<Benefit>();
    public SuggestedExercise suggestedExercise = new SuggestedExercise();
    public List<ExerciseType> ExerciseTypes = new List<ExerciseType>();
    public bool success = false;

    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if (UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync(); 
        }

        injuryLocations = await UserClient.GetInjuries();
        benefits = await ExerciseClient.GetBenefits();
        ExerciseTypes = await ExerciseClient.GetExerciseTypes();

        if (UserState.userProfile != null)
        {
            if (UserState.userProfile.UserId != null)
            {
                suggestedExercise.UserId = UserState.userProfile.UserId;
            }
        }

    }

    void ExerciseTypeSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            suggestedExercise.Exercise.ExerciseType = ExerciseTypes[index].Type;
        }
    }

    void InjuryLocationSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddInjuryLocation(injuryLocations[index]);
        }
    }

    void AddInjuryLocation(InjuryLocation injuryLocation)
    {
        if (suggestedExercise.Exercise.InjuryLocations.Find(pt => pt.BodyPart == injuryLocation.BodyPart) == null)
        {
            suggestedExercise.Exercise.InjuryLocations.Add(new InjuryLocation(injuryLocation.InjuryLocationId, injuryLocation.BodyPart));
        }
    }

    void RemoveInjuryLocation(InjuryLocation injuryLocation)
    {
        suggestedExercise.Exercise.InjuryLocations.RemoveAll(pt => pt.BodyPart == injuryLocation.BodyPart);
    }

    void BenefitSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddBenefit(benefits[index]);
        }
    }

    void AddBenefit(Benefit benefit)
    {
        if (suggestedExercise.Exercise.Benefits.Find(pt => pt.BenefitName == benefit.BenefitName) == null)
        {
            suggestedExercise.Exercise.Benefits.Add(new Benefit(benefit.BenefitId, benefit.BenefitName));
        }
    }

    void RemoveBenefit(Benefit benefit)
    {
        suggestedExercise.Exercise.Benefits.RemoveAll(pt => pt.BenefitName == benefit.BenefitName);
    }


    private async Task RunFileConversion(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(imgFile.Size).ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        suggestedExercise.Exercise.ExerciseMainImage = buffers;
        Image = $"data:{imageType};base64,{Convert.ToBase64String(suggestedExercise.Exercise.ExerciseMainImage)}";

    }

    public void ConvertToImages()
    {

        //Console.WriteLine(Convert.ToBase64String(suggestedExercise.Exercise.ExerciseMainImage));
        Image = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(suggestedExercise.Exercise.ExerciseMainImage));
        StateHasChanged();

    }

    public void MakeExerciseLink()
    {
        string nameModified = suggestedExercise.Exercise.ExerciseName.Replace(' ', '+');
        suggestedExercise.Exercise.ExerciseLink = string.Format("http://www.google.com/search?q={0}", nameModified);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseLink);

    }

    private async void SubmitExerciseSuggestion()
    {
        bool successfullySubmitted = false; 

        Console.WriteLine("~~~~~~~~~~~");
        Console.WriteLine(suggestedExercise.UserId);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseName);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseDescription);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseInstructions);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseType);
        Console.WriteLine(suggestedExercise.Exercise.ExerciseLink);
        Console.WriteLine(suggestedExercise.Exercise.Benefits.Count);
        Console.WriteLine(suggestedExercise.Exercise.InjuryLocations.Count);
        MakeExerciseLink();
        successfullySubmitted = await ExerciseClient.PostSuggestedExercise(suggestedExercise);

        if(successfullySubmitted)
        {
            toastService.ShowToast("Thank you for your suggestion!", ToastLevel.Success);
        }
        else
        {
            toastService.ShowToast("Failed to submit suggestion!", ToastLevel.Error);
        }
    }

}
