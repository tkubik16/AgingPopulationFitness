@page "/injuries-page/{injuryId:int}"
@using AgingPopulationFitness.Shared;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject UserClient UserClient;
@inject HttpClient HttpClient;
@inject UserState UserState;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="view-injury-page">
    <div class="dialog-body">
        <div class="injury-name">
            <h3>@userInjury.InjuryName</h3>
        </div>
        <div class="user-injury-form-field">
            <label>Name:</label>
            <div>
                <input type="text" @bind="userInjury.InjuryName" />
            </div>
        </div>
        <div class="user-injury-form-field">
            <label>Description:</label>
            <div class="injury-description-div">
                <textarea id="injury-description" rows="5" cols="35" @bind="userInjury.InjuryDescription" />
            </div>
        </div>
        <div class="user-injury-form-field">
            <label>Severity:</label>
            <input type="range" min="1" max="10" step="1" @bind="userInjury.InjurySeverity" @bind:event="oninput" />
            <label>@userInjury.InjurySeverity</label>
        </div>
        <div class="user-injury-form-field">
            <label>Date:</label>
            <input type="date" @bind="userInjury.InjuryDate" />
        </div>
        <div class="user-injury-form-field">
            <label>Add Injuries:</label>
            @if (injuryLocations == null)
            {
                <select class="custom-select" disabled>
                    <option>(loading...)</option>
                </select>
            }
            else
            {
                <select class="custom-select" @onchange="InjuryLocationSelected">
                    <option value="-1" disabled selected>(select)</option>
                    @for (var i = 0; i < injuryLocations.Count; i++)
                    {

                        <option value="@i">@i @injuryLocations[i].InjuryLocationId @injuryLocations[i].BodyPart </option>
                    }
                </select>
            }
        </div>

        <div class="injuries">
            @foreach (var injuryLocation in userInjury.InjuryLocations)
            {
                <div class="injury">
                    @injuryLocation.BodyPart
                    <button type="button" class="x-btn" @onclick="@(() => RemoveInjuryLocation(injuryLocation))">x</button>
                </div>
            }
        </div>
        <div class="update-delete-injury">
            <button class="update-injury-btn" @onclick="UpdateUserInjury">Update Injury</button>
            <button  class="delete-injury-btn" @onclick="DeleteUserInjury">Delete Injury</button>
        </div>

    </div>
</div>

@code {
    [Parameter] public int injuryId { get; set; }

    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    public UserInjury userInjury = new UserInjury();
    public List<InjuryLocation> injuryLocations = new List<InjuryLocation>();
    public InjuryLocation injuryLocation = new InjuryLocation();

    bool successfullyDeleted = false;
    bool successfullyUpdated = false;

    protected override async Task OnInitializedAsync()
    {
        injuryLocations = await UserClient.GetInjuries();

        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
        }

        //populate UserState with the users injuries
        if (UserState.userProfile.UserId != null)
        {
            try
            {
                //Console.WriteLine("Injuries razor " + UserState.userProfile.UserId);
                //UserClient.GetUsersInjuries(UserState.userProfile.UserId);
                UserState.userInjuries = await UserClient.GetUsersInjuries(UserState.userProfile.UserId);


            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        for( int i = 0; i < UserState.userInjuries.Count; i++)
        {
            //UserState.userInjuries[i].PrintUserInjury();
            if( UserState.userInjuries[i].InjuryId == injuryId)
            {
                //userInjury = UserState.userInjuries[i];

            }
        }
        for( int i = 0; i < UserState.userInjuries.Count; i++)
        {
            if( UserState.userInjuries[i].InjuryId == injuryId)
            {
                userInjury = UserState.userInjuries[i];
            }
        }

        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
        }


    }

    void InjuryLocationSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddInjuryLocation(injuryLocations[index]);
        }
    }

    void AddInjuryLocation(InjuryLocation injuryLocation)
    {
        if (userInjury.InjuryLocations.Find(pt => pt.BodyPart == injuryLocation.BodyPart) == null)
        {
            userInjury.InjuryLocations.Add(new InjuryLocation(injuryLocation.InjuryLocationId, injuryLocation.BodyPart));
        }
    }

    void RemoveInjuryLocation(InjuryLocation injuryLocation)
    {
        userInjury.InjuryLocations.RemoveAll(pt => pt.BodyPart == injuryLocation.BodyPart);
    }

    async void DeleteUserInjury()
    {
        //userInjury.PrintUserInjury();

        successfullyDeleted = await UserClient.DeleteUserInjury(userInjury);
        Console.Write("successfullyDelted: ");
        Console.WriteLine(successfullyDeleted);
        if (successfullyDeleted)
        {
            NavigationManager.NavigateTo("/injuries-page");
        }
        
    }

    async void UpdateUserInjury()
    {
        //userInjury.PrintUserInjury();

        successfullyUpdated = await UserClient.UpdateUserInjury(userInjury);
        Console.Write("successfullyUpdated: ");
        Console.WriteLine(successfullyDeleted);
        if (successfullyUpdated)
        {
            NavigationManager.NavigateTo("/injuries-page");
        }

    }
}
