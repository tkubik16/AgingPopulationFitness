@page "/exercises-page"
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject ExerciseClient ExerciseClient
@inject InjuryState InjuryState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject InjuryState InjuryState
@inject UserState UserState
@inject ExerciseFilterState ExerciseFilterState
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using SixLabors.ImageSharp;

<div>
    <ExerciseFilterDialog OnSearch="UpdateExercises"></ExerciseFilterDialog>
</div>

@if (allExercises == null)
{
    <div class="spinner"></div>
}
@if (searching == true)
{
    <div class="spinner"></div>
}
@if (allExercises != null)
{
    @if (allExercises.Count == 0)
    {
        <h1 class="no-cards-message">Database returned 0 exercises based on your search.</h1>
    }
}
@if (allExercises != null)
{
    <div class="exercise-cards">
        @for (int i = 0; i < allExercises.Count; i++)
        {
            <div class="exercise-card-component">
                <ExerciseCard exercise="allExercises[i]"></ExerciseCard>
            </div>
        }
    </div>
}



@code {
    EventCallback OnSearch => EventCallback.Factory.Create(this, UpdateExercises);
    public bool searching = false;

    public async void UpdateExercises()
    {
        searching = true;
        allExercises = await ExerciseClient.GetAllExercises(ExerciseFilterState.ExerciseFilter);
        await Task.Run(() => ConvertToImages());
        searching = false;
        StateHasChanged();

    }

    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    public List<Exercise> allExercises;
    public List<string> allExerciseImages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if (UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();

            
        }

        try
        {
            
            Console.WriteLine(ExerciseFilterState.ExerciseFilter.ExcludeBasedOnInjuries);
            allExercises = await ExerciseClient.GetAllExercises(ExerciseFilterState.ExerciseFilter);
            await Task.Run(() => ConvertToImages());
            


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }



    }

    public void ConvertToImages()
    {
        if( allExercises != null){
            for(int i = 0; i < allExercises.Count; i++)
            {
                allExerciseImages.Add(string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String( allExercises[i].ExerciseMainImage) ));
                //Console.WriteLine(allExerciseImages[i]);
            }
        }
    }


}
