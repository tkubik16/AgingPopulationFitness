@page "/injuries-page"
@inject HttpClient HttpClient
@inject UserClient UserClient
@inject InjuryState InjuryState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject InjuryState InjuryState
@inject UserState UserState
@inject ExerciseFilterState ExerciseFilterState
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


@if (InjuryState.ShowingConfigureDialog)
{
    <AddInjuryDialog userInjury="InjuryState.ConfiguringUserInjury"
                 OnCancel="InjuryState.CancelConfigureUserInjuryDialog"
                 OnConfirm="OnConfirmAddInjury" />
}
@if (userInjuries == null)
{
    <div class="spinner"></div>
}
@if (userInjuries != null)
{
    @if( userInjuries.Count == 0)
    {
        <h1 class="no-cards-message">You have no Injuries</h1>
    }
}
@if (userInjuries != null)
{
    <div class="main">
        
        <InjuryLocations update="UpdateInjuryLocations"></InjuryLocations>
        <ul class="user-injury-cards">

            <li class="add-injury-li" @onclick="@(() => InjuryState.ShowConfigureUserInjuryDialog())">
                <svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.75 11.25V5C12.75 4.80109 12.671 4.61032 12.5303 4.46967C12.3897 4.32902 12.1989 4.25 12 4.25C11.8011 4.25 11.6103 4.32902 11.4697 4.46967C11.329 4.61032 11.25 4.80109 11.25 5V11.25H5C4.80109 11.25 4.61032 11.329 4.46967 11.4697C4.32902 11.6103 4.25 11.8011 4.25 12C4.25 12.1989 4.32902 12.3897 4.46967 12.5303C4.61032 12.671 4.80109 12.75 5 12.75H11.25V19C11.2526 19.1981 11.3324 19.3874 11.4725 19.5275C11.6126 19.6676 11.8019 19.7474 12 19.75C12.1989 19.75 12.3897 19.671 12.5303 19.5303C12.671 19.3897 12.75 19.1989 12.75 19V12.75H19C19.1989 12.75 19.3897 12.671 19.5303 12.5303C19.671 12.3897 19.75 12.1989 19.75 12C19.7474 11.8019 19.6676 11.6126 19.5275 11.4725C19.3874 11.3324 19.1981 11.2526 19 11.25H12.75Z" fill="#000000" />
                </svg>
                <h1>Add Injury</h1>
            </li>

            @if (userInjuries != null)
            {
                

                @foreach (var userInjury in userInjuries)
                {
                    <li class="user-injury-info" @onclick="@(() => NavigationManager.NavigateTo($"injuries-page/" + @userInjury.InjuryId ) )">
                        <h3 class="injury-title">@userInjury.InjuryName</h3>
                        <text class="severity-label">Severity: @userInjury.InjurySeverity</text>
                        <text class="date-label">Date: @userInjury.InjuryDate</text>
                        <text class="affects-label">Affects:</text>
                        <div class="injuries">
                            @foreach (var injuryLocation in userInjury.InjuryLocations)
                            {
                                <div class="injury">
                                    @injuryLocation.BodyPart
                                </div>
                            }
                        </div>
                        <div class="view-injury-button-div">
                            <button class="view-injury-button" >
                                View
                            </button>
                        </div>
                    </li>
                }

                

            }
        </ul>
    </div>
}

@code {
    [CascadingParameter(Name = "UpdateMenuOnLogIn")] public EventCallback UpdateMenuOnLogIn { get; set; }
    [CascadingParameter(Name = "UpdateMenuOnRefresh")] public EventCallback UpdateMenuOnRefresh { get; set; }

    public List<UserInjury> userInjuries;
    public bool UpdateInjuryLocations = false;

    protected override async Task OnInitializedAsync()
    {
        if (UserState == null)
        {
            Console.WriteLine("user state is null");
        }
        else
        {

            if (UserState.userProfile == null)
            {
                Console.WriteLine("user profile: null");
            }
            else
            {
                Console.WriteLine("user profile:");
                UserState.userProfile.PrintUserProfile();

            }

        }
        if (await sessionStorage.ContainKeyAsync("UserId"))
        {

            await UserState.Refresh(sessionStorage);
            await UpdateMenuOnRefresh.InvokeAsync();
        }

        if (UserState.userProfile.UserId != null)
        {
            try
            {
                //Console.WriteLine("Injuries razor " + UserState.userProfile.UserId);
                //UserClient.GetUsersInjuries(UserState.userProfile.UserId);
                userInjuries = await UserClient.GetUsersInjuries(UserState.userProfile.UserId);
                UserState.userInjuries = userInjuries;
                for (int i = 0; i < userInjuries.Count; i++)
                {
                    userInjuries[i].PrintUserInjury();
                }
                UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
                ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;
            }
            catch( Exception e)
            {
                Console.WriteLine(e);
            }
        }

    }

    public async void OnConfirmAddInjury()
    {
        InjuryState.ConfirmConfigureUserInjuryDialog();
        try
        {

            userInjuries = await UserClient.GetUsersInjuries(UserState.userProfile.UserId);
            UserState.userInjuries = userInjuries;

            UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
            ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;

            NavigationManager.NavigateTo("/injuries-page");
            UpdateInjuryLocations = true;
            StateHasChanged();
            UpdateInjuryLocations = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }



}
