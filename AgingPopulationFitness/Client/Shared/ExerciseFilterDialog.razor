@using AgingPopulationFitness.Shared;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject UserClient UserClient;
@inject HttpClient HttpClient;
@inject ExerciseClient ExerciseClient;
@inject UserState UserState;
@inject ExerciseFilterState ExerciseFilterState;
@inject IJSRuntime JSRuntime



        <div class="whole-filter">
            <div class="benefit-section">
                <label>Exercise Benefit:</label>
                <select class="benefit-select" id="SelectBenefitExerciseFilter" @onchange="ExerciseBenefitSelected">
                    @if (ExerciseFilterState.AllBenefitsList.Count == 0)
                    {
                        <option value="-1" disabled select selected>All Benefits Selected</option>
                    }
                    else
                    {
                        <option value="-1" disabled select selected>Select Benefit</option>
                    }
                    @for (var i = 0; i < ExerciseFilterState.AllBenefitsList.Count; i++)
                    {
                        <option value="@i">@ExerciseFilterState.AllBenefitsList[i].BenefitId @ExerciseFilterState.AllBenefitsList[i].BenefitName </option>
                    }
                </select>
            </div>
            <div class="benefits">
                @foreach (var benefit in ExerciseFilterState.ExerciseFilter.BenefitsList)
                {
                    <div class="benefit">
                        @benefit.BenefitName
                        <button type="button" class="x-btn" @onclick="@(() => RemoveExerciseBenefit(benefit))">x</button>
                    </div>
                }
            </div>
            <div class="type-section">
                <label>Exercise Type:</label>
                <select class="type-select" id="SelectTypeExerciseFilter" @onchange="ExerciseTypeSelected">
                    @if (ExerciseFilterState.AllExerciseTypesList.Count == 0)
                    {
                        <option value="-1" disabled select selected>All Types Selected</option>
                    }
                    else
                    {
                        <option value="-1" disabled select selected>Select Type</option>
                    }
                    @for (var i = 0; i < ExerciseFilterState.AllExerciseTypesList.Count; i++)
                    {

                        <option value="@i">@ExerciseFilterState.AllExerciseTypesList[i].Type @ExerciseFilterState.AllExerciseTypesList[i].ExerciseTypeId</option>
                    }
                </select>
            </div>
            <div class="types">
                @foreach (var exerciseType in ExerciseFilterState.ExerciseFilter.ExerciseTypesList)
                {
                    <div class="type">
                        @exerciseType.Type
                        <button class="x-btn" type="button"  @onclick="@(() => RemoveExerciseType(exerciseType))">x</button>
                    </div>
                }
            </div>
            <label>Filter based on my injuries:</label>
            <InputCheckbox class="checkbox" @bind-Value=ExerciseFilterState.ExerciseFilter.ExcludeBasedOnInjuries></InputCheckbox>
            <button @onclick="OnSearch">Search</button>
        </div>



@code {

    [Parameter] public EventCallback OnSearch { get; set; }

    //public List<Benefit> ExerciseBenefits = new List<Benefit>();
    //public List<ExerciseType> ExerciseTypes = new List<ExerciseType>();

    protected override async Task OnInitializedAsync()
    {

        if (ExerciseFilterState.ExerciseFilter.BenefitsList.Count == 0)
        {
            ExerciseFilterState.ExerciseFilter.BenefitsList = await ExerciseClient.GetGeneralBenefits();
            for (int i = 0; i < ExerciseFilterState.ExerciseFilter.BenefitsList.Count; i++)
            {
                //ExerciseFilterState.AllBenefitsList.Add(ExerciseFilterState.ExerciseFilter.BenefitsList[i]);
            }
        }
        if (ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Count == 0)
        {
            ExerciseFilterState.ExerciseFilter.ExerciseTypesList = await ExerciseClient.GetExerciseTypes();
            for (int i = 0; i < ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Count; i++)
            {
                //ExerciseFilterState.AllExerciseTypesList.Add(ExerciseFilterState.ExerciseFilter.ExerciseTypesList[i]);
            }
        }
        if (ExerciseFilterState.ExerciseResults.Count == 0)
        {
            await OnSearch.InvokeAsync();
        }
        if (UserState.injuryLocations.Count == 0)
        {
            UserState.injuryLocations = await UserClient.GetUsersInjuryLocations(UserState.userProfile.UserId);
            ExerciseFilterState.ExerciseFilter.InjuryLocations = UserState.injuryLocations;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() => SetSelectedBenefit());
        await Task.Run(() => SetSelectedType());

    }

    void ExerciseTypeSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddExerciseType(ExerciseFilterState.AllExerciseTypesList[index]);
        }
        SetSelectedType();
    }

    void AddExerciseType(ExerciseType exerciseType)
    {
        if (ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Find(pt => pt.Type == exerciseType.Type) == null)
        {
            ExerciseFilterState.ExerciseFilter.ExerciseTypesList.Add(new ExerciseType(exerciseType.ExerciseTypeId, exerciseType.Type));
        }

        ExerciseFilterState.AllExerciseTypesList.RemoveAll(pt => pt.Type == exerciseType.Type);
        SetSelectedType();
    }

    void RemoveExerciseType(ExerciseType exerciseType)
    {
        ExerciseFilterState.ExerciseFilter.ExerciseTypesList.RemoveAll(pt => pt.Type == exerciseType.Type);

        if (ExerciseFilterState.AllExerciseTypesList.Find(pt => pt.Type == exerciseType.Type) == null)
        {
            ExerciseFilterState.AllExerciseTypesList.Add(new ExerciseType(exerciseType.ExerciseTypeId, exerciseType.Type));
        }
        SetSelectedType();
    }

    void ExerciseBenefitSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddExerciseBenefit(ExerciseFilterState.AllBenefitsList[index]);
        }
        SetSelectedBenefit();
    }

    void AddExerciseBenefit(Benefit exerciseBenefit)
    {
        if (ExerciseFilterState.ExerciseFilter.BenefitsList.Find(pt => pt.BenefitId == exerciseBenefit.BenefitId) == null)
        {
            ExerciseFilterState.ExerciseFilter.BenefitsList.Add(new Benefit(exerciseBenefit.BenefitId, exerciseBenefit.BenefitName));
        }
        ExerciseFilterState.AllBenefitsList.RemoveAll(pt => pt.BenefitId == exerciseBenefit.BenefitId);
        SetSelectedBenefit();
    }

    void RemoveExerciseBenefit(Benefit exerciseBenefit)
    {
        ExerciseFilterState.ExerciseFilter.BenefitsList.RemoveAll(pt => pt.BenefitId == exerciseBenefit.BenefitId);
        if (ExerciseFilterState.AllBenefitsList.Find(pt => pt.BenefitId == exerciseBenefit.BenefitId) == null)
        {
            ExerciseFilterState.AllBenefitsList.Add(new Benefit(exerciseBenefit.BenefitId, exerciseBenefit.BenefitName));
        }
        SetSelectedBenefit();
    }
        /*
        void ExerciseBenefitSelected(ChangeEventArgs e)
            {
                if (int.TryParse((string)e.Value, out var index) && index >= -1)
                {
                if (index == -1)
                {
                ExerciseFilterState.ExerciseFilter.benefit.BenefitId = -1;
            ExerciseFilterState.ExerciseFilter.benefit.BenefitName = "All";
                }
                else
                {
                ExerciseFilterState.ExerciseFilter.benefit.BenefitId = ExerciseBenefits[index].BenefitId;
            ExerciseFilterState.ExerciseFilter.benefit.BenefitName = ExerciseBenefits[index].BenefitName;
    }
    ExerciseFilterState.benefitSelectValue = (string)e.Value;
    }
    }
    */
        /*
        void ExerciseTypeSelected(ChangeEventArgs e)
        {
        if (int.TryParse((string)e.Value, out var index) && index >= -1)
                {
                if (index == -1)
                {
                ExerciseFilterState.ExerciseFilter.exerciseType.ExerciseTypeId = -1;
                ExerciseFilterState.ExerciseFilter.exerciseType.Type = "All";
            }
                else
                {
                ExerciseFilterState.ExerciseFilter.exerciseType.ExerciseTypeId = ExerciseTypes[index].ExerciseTypeId;
                ExerciseFilterState.ExerciseFilter.exerciseType.Type = ExerciseTypes[index].Type;
            }
            ExerciseFilterState.typeSelectValue = (string)e.Value;
    }
    }
    */
    public async void SetSelectedBenefit()
    {
        string value = ExerciseFilterState.benefitSelectValue;
        try{
            await JSRuntime.InvokeVoidAsync("setBenefitSelectExerciseFilter", -1);
        }
        catch( Exception e)
        {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    public async void SetSelectedType()
    {
        string value = ExerciseFilterState.typeSelectValue;
        try{
            await JSRuntime.InvokeVoidAsync("setTypeSelectExerciseFilter", -1);
        }
        catch( Exception e)
        {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    

}
